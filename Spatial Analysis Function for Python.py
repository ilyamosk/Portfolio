# -*- coding: utf-8 -*-
"""Spatial Analysis Function.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KWL3rul_fbjzKEe9OOdJ3fFWc99hdeSz
"""

import pandas as pd
import numpy as np
from geopy.distance import geodesic

# Read files into environment
dispensary_df = pd.read_csv("dispensary_master.csv")
participant_df = pd.read_csv("participant_master.csv")

# Spatial Analysis Function Code Begins
def spatial_analysis(participant_df, dispensary_df, start_column_name, end_column_name, buffer_1=1000, buffer_2=2000, buffer_3=5000):
    # Initializing Columns
    participant_df['pd_buff_1'] = 0
    participant_df['pd_buff_2'] = 0
    participant_df['pd_buff_3'] = 0
    participant_df['n_buff_1'] = 0
    participant_df['n_buff_2'] = 0
    participant_df['n_buff_3'] = 0
    participant_df['min_dist_dispensary'] = ''
    participant_df['min_dist'] = np.inf

    # I LOOP: for loop to iterate through each participant
    for i in range(len(participant_df)):
        print('On participant #', i)  # this is the output which displays the loop progress in console
        p_lat = participant_df['lat'][i]
        p_long = participant_df['long'][i]
        p_sample = pd.to_datetime(participant_df['enroll_date'][i])
        start_date = pd.to_datetime(participant_df[start_column_name][i])
        end_date = pd.to_datetime(participant_df[end_column_name][i])

        # RESETTING COLUMNS
        pd_buff_1 = 0
        pd_buff_2 = 0
        pd_buff_3 = 0
        n_buff_1 = 0
        n_buff_2 = 0
        n_buff_3 = 0
        min_dist_disp = ''
        min_dist = np.inf

        # J LOOP OPEN: nesting a second for loop to iterate through each dispensary in respect to each participant
        for j in range(len(dispensary_df)):
            d_lat = dispensary_df['lat'][j]
            d_long = dispensary_df['long'][j]
            d_issue = pd.to_datetime(dispensary_df['issue_date'][j])
            d_exp = pd.to_datetime(dispensary_df['expiration_date'][j])
            d_name = dispensary_df['corporation_name'][j]

            # setting the ceiling date for the study
            if d_exp > pd.to_datetime("2022-01-01"):
                d_exp = pd.to_datetime("2022-01-01")

            # TEMPORALITY CONDITIONS
            # MIN DIST
            if ((d_issue <= start_date <= d_exp) or
                (start_date <= d_issue <= end_date <= d_exp) or
                (d_issue <= start_date <= d_exp <= end_date and start_date < d_exp) or
                (start_date <= d_issue <= end_date <= d_exp and d_issue < end_date)):

                calc_dist = geodesic((p_lat, p_long), (d_lat, d_long)).meters
                if calc_dist <= min_dist:
                    min_dist = calc_dist
                    min_dist_disp = d_name

            # 1 KM BUFFER
            if d_issue <= start_date <= end_date <= d_exp:
                if geodesic((p_lat, p_long), (d_lat, d_long)).meters <= buffer_1:
                    pd_buff_1 += (end_date - start_date).days
                    n_buff_1 += 1
            elif start_date <= d_issue <= d_exp <= end_date:
                if geodesic((p_lat, p_long), (d_lat, d_long)).meters <= buffer_1:
                    pd_buff_1 += (d_exp - d_issue).days
                    n_buff_1 += 1
            elif d_issue <= start_date <= d_exp <= end_date and start_date < d_exp:
                if geodesic((p_lat, p_long), (d_lat, d_long)).meters <= buffer_1:
                    pd_buff_1 += (d_exp - start_date).days
                    n_buff_1 += 1
            elif start_date <= d_issue <= end_date <= d_exp and d_issue < end_date:
                if geodesic((p_lat, p_long), (d_lat, d_long)).meters <= buffer_1:
                    pd_buff_1 += (end_date - d_issue).days
                    n_buff_1 += 1

            # 2 KM BUFFER
            if d_issue <= start_date <= end_date <= d_exp:
                if geodesic((p_lat, p_long), (d_lat, d_long)).meters <= buffer_2:
                    pd_buff_2 += (end_date - start_date).days
                    n_buff_2 += 1
            elif start_date <= d_issue <= d_exp <= end_date:
                if geodesic((p_lat, p_long), (d_lat, d_long)).meters <= buffer_2:
                    pd_buff_2 += (d_exp - d_issue).days
                    n_buff_2 += 1
            elif d_issue <= start_date <= d_exp <= end_date and start_date < d_exp:
                if geodesic((p_lat, p_long), (d_lat, d_long)).meters <= buffer_2:
                    pd_buff_2 += (d_exp - start_date).days
                    n_buff_2 += 1
            elif start_date <= d_issue <= end_date <= d_exp and d_issue < end_date:
                if geodesic((p_lat, p_long), (d_lat, d_long)).meters <= buffer_2:
                    pd_buff_2 += (end_date - d_issue).days
                    n_buff_2 += 1

            # 5 KM BUFFER
            if d_issue <= start_date <= end_date <= d_exp:
                if geodesic((p_lat, p_long), (d_lat, d_long)).meters <= buffer_3:
                    pd_buff_3 += (end_date - start_date).days
                    n_buff_3 += 1
            elif start_date <= d_issue <= d_exp <= end_date:
                if geodesic((p_lat, p_long), (d_lat, d_long)).meters <= buffer_3:
                    pd_buff_3 += (d_exp - d_issue).days
                    n_buff_3 += 1
            elif d_issue <= start_date <= d_exp <= end_date and start_date < d_exp:
                if geodesic((p_lat, p_long), (d_lat, d_long)).meters <= buffer_3:
                    pd_buff_3 += (d_exp - start_date).days
                    n_buff_3 += 1
            elif start_date <= d_issue <= end_date <= d_exp and d_issue < end_date:
                if geodesic((p_lat, p_long), (d_lat, d_long)).meters <= buffer_3:
                    pd_buff_3 += (end_date - d_issue).days
                    n_buff_3 += 1

        # ADDING LOOP RESULTS BACK TO PARTICIPANT DATAFRAME
        participant_df.loc[i, 'pd_buff_1'] = pd_buff_1
        participant_df.loc[i, 'pd_buff_2'] = pd_buff_2
        participant_df.loc[i, 'pd_buff_3'] = pd_buff_3
        participant_df.loc[i, 'n_buff_1'] = n_buff_1
        participant_df.loc[i, 'n_buff_2'] = n_buff_2
        participant_df.loc[i, 'n_buff_3'] = n_buff_3
        participant_df.loc[i, 'min_dist_dispensary'] = min_dist_disp
        participant_df.loc[i, 'min_dist'] = min_dist

    return participant_df

# Spatial Analysis Function Code Stops

# Run
output_df = spatial_analysis(participant_df, dispensary_df, 'two_weeks_before_enroll', 'enroll_date', 1000, 2000, 5000)

output_df = output_df.sort_values(by=['pd_buff_1'], ascending=False)

print(output_df)

# Create a CSV
output_df.to_csv('partipant_analyzed.csv', index=False)